version: '3'

services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.10
    container_name: traefik
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--log.level=DEBUG"
      - "--log.filePath=/logs/traefik.log"
      - "--accessLog.filePath=/logs/access.log"
      - "--docker.domain=docker.localhost"
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.strip-client-api-prefix.stripprefix.prefixes=/api"

      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"

#      look at client-api compose file to know why it's commented
#      - "traefik.http.middlewares.strip-docs.stripprefix.prefixes=/,/docs"
#      - "traefik.http.middlewares.docs-redirectregex.redirectregex.regex=^http://swagger.localhost/(.*).js"
#      - "traefik.http.middlewares.docs-redirectregex.redirectregex.replacement=http://swagger.localhost/docs/$${1}"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yaml:/etc/traefik/traefik.yaml
      - ./logs:/logs # Add this line to mount a volume for logs

#  wd-mongo:
#    ports:
#      - '27017:27017'
#    image: mongo
#    container_name: wd-mongo
#    restart: always
#    logging:
#      options:
#        max-size: 1g
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: example
#    volumes:
#      - ./mongo:/data/db
#  wd-mongo-express:
#    image: mongo-express
#    restart: always
#    container_name: wd-mongo-express
#    ports:
#      - "8081:8081"
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: example
#      ME_CONFIG_MONGODB_SERVER: wd-mongo
#      ME_CONFIG_MONGODB_URL: mongodb://root:example@wd-mongo:27017/

  wd-logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: wd-logstash
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro

  wd-filebeat:
    image: docker.elastic.co/beats/filebeat:8.13.4
    container_name: wd-filebeat
#    user: root
    entrypoint: sh -c "chmod go-w /usr/share/filebeat/filebeat.yml && filebeat -e -c /usr/share/filebeat/filebeat.yml"
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - registry:/usr/share/filebeat/data:rw
#      - wd-user-svc-logs:/var/log/wd-user-svc
#      - wd-order-svc-logs:/var/log/wd-order-svc
      - wd-client-api-logs:/var/log/wd-client-api

  wd-redis:
    image: redis/redis-stack
    container_name: wd-redis
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - ./redis:/data
#      - ./config/local-redis-stack.conf:/redis-stack.conf

volumes:
#  wd-user-svc-logs:
#    external: true
#  wd-order-svc-logs:
#    external: true
  wd-client-api-logs:
    external: true
  registry:
